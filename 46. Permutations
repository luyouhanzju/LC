#Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

#Example 1:

#Input: nums = [1,2,3]
#Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
#Example 2:

#Input: nums = [0,1]
#Output: [[0,1],[1,0]]
#Example 3:

#Input: nums = [1]
#Output: [[1]]

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = []
        used = [False] * len(nums)
        self.backtracking(nums,[],used,result)
        return result 
    def backtracking(self,nums,path,used,result):
        if len(path) == len(nums):
            result.append(path[:])
        for i in range(len(nums)):
            if used[i]: continue
            used[i] = True
            path.append(nums[i])
            self.backtracking(nums,path,used,result)
            path.pop()
            used[i] = False
