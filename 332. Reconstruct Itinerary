#You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.
#All of the tickets belong to a man who departs from "JFK", thus, the itinerary must begin with "JFK". 
#If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.
#For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
#You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.

from collections import defaultdict
class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        targets = defaultdict(list)
        for ticket in tickets:
            targets[ticket[0]].append(ticket[1])
        for key in targets:
            targets[key].sort(reverse=True)
        result = []
        self.backtracking("JFK", targets, result)
        return result[::-1]

    def backtracking(self,airport,targets,result):
        while targets[airport]:
            next_airport = targets[airport].pop()
            self.backtracking(next_airport,targets,result)
        result.append(airport)
