#Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
#Example 1:

#Input: nums = [1,1,2]
#Output:
#[[1,1,2],
# [1,2,1],
# [2,1,1]]
#Example 2:

#Input: nums = [1,2,3]
#Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        result = []
        nums.sort()
        used = [False] * len(nums)
        self.backtracking(nums,[],used,result)
        return result 
    def backtracking(self,nums,path,used,result):
        if len(path) == len(nums):
            result.append(path[:])
        for i in range(len(nums)):
            if (i>0 and nums[i] == nums[i-1] and not used[i - 1]) or used[i]: continue
            used[i] = True
            path.append(nums[i])
            self.backtracking(nums,path,used,result)
            path.pop()
            used[i] = False
